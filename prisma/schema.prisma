generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
   id        String   @id @default(uuid())
   name      String
   email     String   @unique
   password  String
   createdAt DateTime @default(now())
   lastModified DateTime @default(now())
   goals     Goal[]
   groupLinks  GroupMember[]
   givenFeedback Feedback[]
}

model Group {
    id        String  @id @default(uuid())
    name      String
    createdAt DateTime @default(now())
    groupLinks  GroupMember[]
}

model GroupMember {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    group     Group    @relation(fields: [groupId], references: [id])
    groupId   String

    role      String   // Ej: 'admin', 'member'
    joinedAt  DateTime @default(now())

    @@unique([userId, groupId])
}

model Goal {
    id      String  @id @default(uuid())
    title   String
    user    User    @relation(fields: [userId], references: [id])
    userId  String
    tasks   Task[]
}

model Task {
  id        String   @id @default(uuid())
  title     String
  week      Int
  completed Boolean  @default(false)
  goal      Goal     @relation(fields: [goalId], references: [id])
  goalId    String
  feedback  Feedback[]
}

model Feedback {
  id        String   @id @default(uuid())
  from      User     @relation(fields: [fromId], references: [id])
  fromId    String
  task        Task     @relation(fields: [taskId], references: [id])
  taskId      String
  message   String
  createdAt DateTime @default(now())
}

// NEED CREATE MATERIALIZED VIEW
model GroupWeeklyStats {
  groupId      String
  weekStart    DateTime
  tasksCompleted Int
  totalTasks   Int
  productivity Float
  
  @@map("group_weekly_stats")
  @@ignore
}
